From 22782d3098a3276e6f72fb7a0bf86242d4236bde Mon Sep 17 00:00:00 2001
From: Gregor Jasny <gjasny@googlemail.com>
Date: Sat, 15 Dec 2018 14:38:33 +0100
Subject: [PATCH] Hide non-public symbols

---
 CMakeLists.txt                                         | 7 +++++++
 core/include/prometheus/check_names.h                  | 6 ++++--
 core/include/prometheus/client_metric.h                | 4 +++-
 core/include/prometheus/collectable.h                  | 4 +++-
 core/include/prometheus/counter.h                      | 5 +++--
 core/include/prometheus/detail/ckms_quantiles.h        | 4 +++-
 core/include/prometheus/detail/counter_builder.h       | 4 +++-
 core/include/prometheus/detail/gauge_builder.h         | 4 +++-
 core/include/prometheus/detail/histogram_builder.h     | 4 +++-
 core/include/prometheus/detail/summary_builder.h       | 4 +++-
 core/include/prometheus/detail/time_window_quantiles.h | 3 ++-
 core/include/prometheus/detail/utils.h                 | 5 ++++-
 core/include/prometheus/detail/visibility.h            | 9 +++++++++
 core/include/prometheus/family.h                       | 3 ++-
 core/include/prometheus/gauge.h                        | 5 +++--
 core/include/prometheus/histogram.h                    | 5 +++--
 core/include/prometheus/metric_family.h                | 3 ++-
 core/include/prometheus/registry.h                     | 3 ++-
 core/include/prometheus/serializer.h                   | 3 ++-
 core/include/prometheus/summary.h                      | 5 +++--
 core/include/prometheus/text_serializer.h              | 3 ++-
 pull/include/prometheus/exposer.h                      | 3 ++-
 push/include/prometheus/gateway.h                      | 3 ++-
 23 files changed, 73 insertions(+), 26 deletions(-)
 create mode 100644 core/include/prometheus/detail/visibility.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 94dc1e1..937a598 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -20,6 +20,13 @@ if(OVERRIDE_CXX_STANDARD_FLAGS)
   set(CMAKE_CXX_EXTENSIONS Off)
 endif()
 
+# Hide things by default for shared libraries
+if(BUILD_SHARED_LIBS)
+  set(CMAKE_C_VISIBILITY_PRESET hidden)
+  set(CMAKE_CXX_VISIBILITY_PRESET hidden)
+  set(CMAKE_VISIBILITY_INLINES_HIDDEN YES)
+endif()
+
 set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
 find_package(Threads)
 
diff --git a/core/include/prometheus/check_names.h b/core/include/prometheus/check_names.h
index 91acf23..2b6ebda 100644
--- a/core/include/prometheus/check_names.h
+++ b/core/include/prometheus/check_names.h
@@ -2,8 +2,10 @@
 
 #include <string>
 
+#include "prometheus/detail/visibility.h"
+
 namespace prometheus {
 
-bool CheckMetricName(const std::string& name);
-bool CheckLabelName(const std::string& name);
+PROMETHEUSCPP_API bool CheckMetricName(const std::string& name);
+PROMETHEUSCPP_API bool CheckLabelName(const std::string& name);
 }  // namespace prometheus
diff --git a/core/include/prometheus/client_metric.h b/core/include/prometheus/client_metric.h
index 4f04281..2bcc364 100644
--- a/core/include/prometheus/client_metric.h
+++ b/core/include/prometheus/client_metric.h
@@ -5,9 +5,11 @@
 #include <tuple>
 #include <vector>
 
+#include "prometheus/detail/visibility.h"
+
 namespace prometheus {
 
-struct ClientMetric {
+struct PROMETHEUSCPP_API ClientMetric {
   // Label
 
   struct Label {
diff --git a/core/include/prometheus/collectable.h b/core/include/prometheus/collectable.h
index 97ce02a..fe6a766 100644
--- a/core/include/prometheus/collectable.h
+++ b/core/include/prometheus/collectable.h
@@ -2,6 +2,8 @@
 
 #include <vector>
 
+#include "prometheus/detail/visibility.h"
+
 namespace prometheus {
 struct MetricFamily;
 }
@@ -12,7 +14,7 @@ namespace prometheus {
 /// collect metrics.
 ///
 /// A Collectable has to be registered for collection. See Registry.
-class Collectable {
+class PROMETHEUSCPP_API Collectable {
  public:
   virtual ~Collectable() = default;
 
diff --git a/core/include/prometheus/counter.h b/core/include/prometheus/counter.h
index 3faf693..ecd294a 100644
--- a/core/include/prometheus/counter.h
+++ b/core/include/prometheus/counter.h
@@ -2,6 +2,7 @@
 
 #include "prometheus/client_metric.h"
 #include "prometheus/detail/counter_builder.h"
+#include "prometheus/detail/visibility.h"
 #include "prometheus/gauge.h"
 #include "prometheus/metric_type.h"
 
@@ -22,7 +23,7 @@ namespace prometheus {
 ///
 /// The class is thread-safe. No concurrent call to any API of this type causes
 /// a data race.
-class Counter {
+class PROMETHEUSCPP_API Counter {
  public:
   static const MetricType metric_type{MetricType::Counter};
 
@@ -76,6 +77,6 @@ class Counter {
 ///
 /// To finish the configuration of the Counter metric, register it with
 /// Register(Registry&).
-detail::CounterBuilder BuildCounter();
+PROMETHEUSCPP_API detail::CounterBuilder BuildCounter();
 
 }  // namespace prometheus
diff --git a/core/include/prometheus/detail/ckms_quantiles.h b/core/include/prometheus/detail/ckms_quantiles.h
index 2fe6fe2..06e0136 100644
--- a/core/include/prometheus/detail/ckms_quantiles.h
+++ b/core/include/prometheus/detail/ckms_quantiles.h
@@ -5,10 +5,12 @@
 #include <functional>
 #include <vector>
 
+#include "prometheus/detail/visibility.h"
+
 namespace prometheus {
 namespace detail {
 
-class CKMSQuantiles {
+class PROMETHEUSCPP_API CKMSQuantiles {
  public:
   struct Quantile {
     const double quantile;
diff --git a/core/include/prometheus/detail/counter_builder.h b/core/include/prometheus/detail/counter_builder.h
index 5967a7c..e88fb82 100644
--- a/core/include/prometheus/detail/counter_builder.h
+++ b/core/include/prometheus/detail/counter_builder.h
@@ -3,6 +3,8 @@
 #include <map>
 #include <string>
 
+#include "prometheus/detail/visibility.h"
+
 namespace prometheus {
 
 template <typename T>
@@ -12,7 +14,7 @@ class Registry;
 
 namespace detail {
 
-class CounterBuilder {
+class PROMETHEUSCPP_API CounterBuilder {
  public:
   CounterBuilder& Labels(const std::map<std::string, std::string>& labels);
   CounterBuilder& Name(const std::string&);
diff --git a/core/include/prometheus/detail/gauge_builder.h b/core/include/prometheus/detail/gauge_builder.h
index 2778ff8..cd1ec3e 100644
--- a/core/include/prometheus/detail/gauge_builder.h
+++ b/core/include/prometheus/detail/gauge_builder.h
@@ -3,6 +3,8 @@
 #include <map>
 #include <string>
 
+#include "prometheus/detail/visibility.h"
+
 namespace prometheus {
 
 template <typename T>
@@ -12,7 +14,7 @@ class Registry;
 
 namespace detail {
 
-class GaugeBuilder {
+class PROMETHEUSCPP_API GaugeBuilder {
  public:
   GaugeBuilder& Labels(const std::map<std::string, std::string>& labels);
   GaugeBuilder& Name(const std::string&);
diff --git a/core/include/prometheus/detail/histogram_builder.h b/core/include/prometheus/detail/histogram_builder.h
index c2d9a1e..4c1dbaa 100644
--- a/core/include/prometheus/detail/histogram_builder.h
+++ b/core/include/prometheus/detail/histogram_builder.h
@@ -3,6 +3,8 @@
 #include <map>
 #include <string>
 
+#include "prometheus/detail/visibility.h"
+
 namespace prometheus {
 
 template <typename T>
@@ -12,7 +14,7 @@ class Registry;
 
 namespace detail {
 
-class HistogramBuilder {
+class PROMETHEUSCPP_API HistogramBuilder {
  public:
   HistogramBuilder& Labels(const std::map<std::string, std::string>& labels);
   HistogramBuilder& Name(const std::string&);
diff --git a/core/include/prometheus/detail/summary_builder.h b/core/include/prometheus/detail/summary_builder.h
index 1b8efa3..cb989ae 100644
--- a/core/include/prometheus/detail/summary_builder.h
+++ b/core/include/prometheus/detail/summary_builder.h
@@ -3,6 +3,8 @@
 #include <map>
 #include <string>
 
+#include "prometheus/detail/visibility.h"
+
 namespace prometheus {
 
 template <typename T>
@@ -12,7 +14,7 @@ class Registry;
 
 namespace detail {
 
-class SummaryBuilder {
+class PROMETHEUSCPP_API SummaryBuilder {
  public:
   SummaryBuilder& Labels(const std::map<std::string, std::string>& labels);
   SummaryBuilder& Name(const std::string&);
diff --git a/core/include/prometheus/detail/time_window_quantiles.h b/core/include/prometheus/detail/time_window_quantiles.h
index aeb42ee..1c5b6cb 100644
--- a/core/include/prometheus/detail/time_window_quantiles.h
+++ b/core/include/prometheus/detail/time_window_quantiles.h
@@ -5,11 +5,12 @@
 #include <vector>
 
 #include "prometheus/detail/ckms_quantiles.h"
+#include "prometheus/detail/visibility.h"
 
 namespace prometheus {
 namespace detail {
 
-class TimeWindowQuantiles {
+class PROMETHEUSCPP_API TimeWindowQuantiles {
   using Clock = std::chrono::steady_clock;
 
  public:
diff --git a/core/include/prometheus/detail/utils.h b/core/include/prometheus/detail/utils.h
index 503c1b2..30b8735 100644
--- a/core/include/prometheus/detail/utils.h
+++ b/core/include/prometheus/detail/utils.h
@@ -4,6 +4,8 @@
 #include <map>
 #include <string>
 
+#include "prometheus/detail/visibility.h"
+
 namespace prometheus {
 
 namespace detail {
@@ -13,7 +15,8 @@ namespace detail {
 /// \param labels The map that will be computed the hash value.
 ///
 /// \returns The hash value of the given labels.
-std::size_t hash_labels(const std::map<std::string, std::string>& labels);
+PROMETHEUSCPP_API std::size_t hash_labels(
+    const std::map<std::string, std::string>& labels);
 
 }  // namespace detail
 
diff --git a/core/include/prometheus/detail/visibility.h b/core/include/prometheus/detail/visibility.h
new file mode 100644
index 0000000..22ec2a0
--- /dev/null
+++ b/core/include/prometheus/detail/visibility.h
@@ -0,0 +1,9 @@
+#pragma once
+
+#ifndef PROMETHEUSCPP_API
+#if __GNUC__ >= 4
+#define PROMETHEUSCPP_API __attribute__((visibility("default")))
+#else
+#define PROMETHEUSCPP_API
+#endif
+#endif
diff --git a/core/include/prometheus/family.h b/core/include/prometheus/family.h
index bb4a950..8783087 100644
--- a/core/include/prometheus/family.h
+++ b/core/include/prometheus/family.h
@@ -17,6 +17,7 @@
 #include "prometheus/collectable.h"
 #include "prometheus/detail/future_std.h"
 #include "prometheus/detail/utils.h"
+#include "prometheus/detail/visibility.h"
 #include "prometheus/metric_family.h"
 
 namespace prometheus {
@@ -58,7 +59,7 @@ namespace prometheus {
 ///
 /// \tparam T One of the metric types Counter, Gauge, Histogram or Summary.
 template <typename T>
-class Family : public Collectable {
+class PROMETHEUSCPP_API Family : public Collectable {
  public:
   /// \brief Create a new metric.
   ///
diff --git a/core/include/prometheus/gauge.h b/core/include/prometheus/gauge.h
index 8184aa6..c05c135 100644
--- a/core/include/prometheus/gauge.h
+++ b/core/include/prometheus/gauge.h
@@ -4,6 +4,7 @@
 
 #include "prometheus/client_metric.h"
 #include "prometheus/detail/gauge_builder.h"
+#include "prometheus/detail/visibility.h"
 #include "prometheus/metric_type.h"
 
 namespace prometheus {
@@ -20,7 +21,7 @@ namespace prometheus {
 ///
 /// The class is thread-safe. No concurrent call to any API of this type causes
 /// a data race.
-class Gauge {
+class PROMETHEUSCPP_API Gauge {
  public:
   static const MetricType metric_type{MetricType::Gauge};
 
@@ -88,6 +89,6 @@ class Gauge {
 ///
 /// To finish the configuration of the Gauge metric register it with
 /// Register(Registry&).
-detail::GaugeBuilder BuildGauge();
+PROMETHEUSCPP_API detail::GaugeBuilder BuildGauge();
 
 }  // namespace prometheus
diff --git a/core/include/prometheus/histogram.h b/core/include/prometheus/histogram.h
index a707874..e1209bb 100644
--- a/core/include/prometheus/histogram.h
+++ b/core/include/prometheus/histogram.h
@@ -5,6 +5,7 @@
 #include "prometheus/client_metric.h"
 #include "prometheus/counter.h"
 #include "prometheus/detail/histogram_builder.h"
+#include "prometheus/detail/visibility.h"
 #include "prometheus/metric_type.h"
 
 namespace prometheus {
@@ -25,7 +26,7 @@ namespace prometheus {
 ///
 /// The class is thread-safe. No concurrent call to any API of this type causes
 /// a data race.
-class Histogram {
+class PROMETHEUSCPP_API Histogram {
  public:
   using BucketBoundaries = std::vector<double>;
 
@@ -89,6 +90,6 @@ class Histogram {
 ///
 /// To finish the configuration of the Histogram metric register it with
 /// Register(Registry&).
-detail::HistogramBuilder BuildHistogram();
+PROMETHEUSCPP_API detail::HistogramBuilder BuildHistogram();
 
 }  // namespace prometheus
diff --git a/core/include/prometheus/metric_family.h b/core/include/prometheus/metric_family.h
index da913a4..f27e787 100644
--- a/core/include/prometheus/metric_family.h
+++ b/core/include/prometheus/metric_family.h
@@ -4,11 +4,12 @@
 #include <vector>
 
 #include "prometheus/client_metric.h"
+#include "prometheus/detail/visibility.h"
 #include "prometheus/metric_type.h"
 
 namespace prometheus {
 
-struct MetricFamily {
+struct PROMETHEUSCPP_API MetricFamily {
   std::string name;
   std::string help;
   MetricType type = MetricType::Untyped;
diff --git a/core/include/prometheus/registry.h b/core/include/prometheus/registry.h
index cc90107..b65073d 100644
--- a/core/include/prometheus/registry.h
+++ b/core/include/prometheus/registry.h
@@ -13,6 +13,7 @@
 #include "prometheus/detail/gauge_builder.h"
 #include "prometheus/detail/histogram_builder.h"
 #include "prometheus/detail/summary_builder.h"
+#include "prometheus/detail/visibility.h"
 #include "prometheus/family.h"
 #include "prometheus/gauge.h"
 #include "prometheus/histogram.h"
@@ -34,7 +35,7 @@ namespace prometheus {
 ///
 /// The class is thread-safe. No concurrent call to any API of this type causes
 /// a data race.
-class Registry : public Collectable {
+class PROMETHEUSCPP_API Registry : public Collectable {
  public:
   /// \brief Returns a list of metrics and their samples.
   ///
diff --git a/core/include/prometheus/serializer.h b/core/include/prometheus/serializer.h
index 83bbd6e..f08de4d 100644
--- a/core/include/prometheus/serializer.h
+++ b/core/include/prometheus/serializer.h
@@ -4,11 +4,12 @@
 #include <string>
 #include <vector>
 
+#include "prometheus/detail/visibility.h"
 #include "prometheus/metric_family.h"
 
 namespace prometheus {
 
-class Serializer {
+class PROMETHEUSCPP_API Serializer {
  public:
   virtual ~Serializer() = default;
   virtual std::string Serialize(const std::vector<MetricFamily>&) const;
diff --git a/core/include/prometheus/summary.h b/core/include/prometheus/summary.h
index 56fcd0a..547f96a 100644
--- a/core/include/prometheus/summary.h
+++ b/core/include/prometheus/summary.h
@@ -9,6 +9,7 @@
 #include "prometheus/detail/ckms_quantiles.h"
 #include "prometheus/detail/summary_builder.h"
 #include "prometheus/detail/time_window_quantiles.h"
+#include "prometheus/detail/visibility.h"
 #include "prometheus/metric_type.h"
 
 namespace prometheus {
@@ -37,7 +38,7 @@ namespace prometheus {
 ///
 /// The class is thread-safe. No concurrent call to any API of this type causes
 /// a data race.
-class Summary {
+class PROMETHEUSCPP_API Summary {
  public:
   using Quantiles = std::vector<detail::CKMSQuantiles::Quantile>;
 
@@ -117,6 +118,6 @@ class Summary {
 ///
 /// To finish the configuration of the Summary metric register it with
 /// Register(Registry&).
-detail::SummaryBuilder BuildSummary();
+PROMETHEUSCPP_API detail::SummaryBuilder BuildSummary();
 
 }  // namespace prometheus
diff --git a/core/include/prometheus/text_serializer.h b/core/include/prometheus/text_serializer.h
index a12f0ec..3260ab6 100644
--- a/core/include/prometheus/text_serializer.h
+++ b/core/include/prometheus/text_serializer.h
@@ -4,12 +4,13 @@
 #include <string>
 #include <vector>
 
+#include "prometheus/detail/visibility.h"
 #include "prometheus/metric_family.h"
 #include "prometheus/serializer.h"
 
 namespace prometheus {
 
-class TextSerializer : public Serializer {
+class PROMETHEUSCPP_API TextSerializer : public Serializer {
  public:
   using Serializer::Serialize;
   void Serialize(std::ostream& out,
diff --git a/pull/include/prometheus/exposer.h b/pull/include/prometheus/exposer.h
index c318f75..3f26b93 100644
--- a/pull/include/prometheus/exposer.h
+++ b/pull/include/prometheus/exposer.h
@@ -7,6 +7,7 @@
 #include <vector>
 
 #include "prometheus/collectable.h"
+#include "prometheus/detail/visibility.h"
 #include "prometheus/registry.h"
 
 class CivetServer;
@@ -17,7 +18,7 @@ namespace detail {
 class MetricsHandler;
 }  // namespace detail

-class Exposer {
+class PROMETHEUSCPP_API Exposer {
  public:
   explicit Exposer(const std::string& bind_address,
                    const std::string& uri = std::string("/metrics"),
diff --git a/push/include/prometheus/gateway.h b/push/include/prometheus/gateway.h
index 1456d99..e5eb8c7 100644
--- a/push/include/prometheus/gateway.h
+++ b/push/include/prometheus/gateway.h
@@ -7,11 +7,12 @@
 #include <string>
 #include <vector>
 
+#include "prometheus/detail/visibility.h"
 #include "prometheus/registry.h"
 
 namespace prometheus {
 
-class Gateway {
+class PROMETHEUSCPP_API Gateway {
  public:
   using Labels = std::map<std::string, std::string>;
 

From: https://gitlab.com/wireshark/wireshark/-/merge_requests/19093

From d97945614088cb6aa624c7bc859b4f303a62ecb8 Mon Sep 17 00:00:00 2001
From: Sam James <sam@gentoo.org>
Date: Thu, 20 Feb 2025 14:02:51 +0000
Subject: [PATCH] Drop invalid malloc attribute from wmem_tree_new*

Wireshark would fail its wmem_test test when built with GCC LTO in some
cases with a null pointer dereference with a check that got optimised out.

This turns out to be because wmem_tree_new and wmem_tree_new_autoreset
are (incorrectly) marked with the malloc attribute, which promises to GCC
that any memory returned by the functions is completely clean and holds
no references to existing objects.

Similar to 365a8212989ef0ef506969631617175a2464302f.

See also:
* https://bugs.debian.org/1015706
* https://bugs.gentoo.org/941890
* https://gcc.gnu.org/PR117315

Closes #18216
---
 wsutil/wmem/wmem_tree.h | 6 ++----
 1 file changed, 2 insertions(+), 4 deletions(-)

diff --git a/wsutil/wmem/wmem_tree.h b/wsutil/wmem/wmem_tree.h
index 45cbcea391d..53fbb132202 100644
--- a/wsutil/wmem/wmem_tree.h
+++ b/wsutil/wmem/wmem_tree.h
@@ -40,8 +40,7 @@ typedef struct _wmem_tree_t wmem_tree_t;
  * the tree is fully destroyed. */
 WS_DLL_PUBLIC
 wmem_tree_t *
-wmem_tree_new(wmem_allocator_t *allocator)
-G_GNUC_MALLOC;
+wmem_tree_new(wmem_allocator_t *allocator);
 
 /** Creates a tree with two allocator scopes. The base structure lives in the
  * metadata scope, and the tree data lives in the data scope. Every time free_all
@@ -57,8 +56,7 @@ G_GNUC_MALLOC;
  */
 WS_DLL_PUBLIC
 wmem_tree_t *
-wmem_tree_new_autoreset(wmem_allocator_t *metadata_scope, wmem_allocator_t *data_scope)
-G_GNUC_MALLOC;
+wmem_tree_new_autoreset(wmem_allocator_t *metadata_scope, wmem_allocator_t *data_scope);
 
 /** Cleanup memory used by tree.  Intended for NULL scope allocated trees */
 WS_DLL_PUBLIC
-- 
GitLab

